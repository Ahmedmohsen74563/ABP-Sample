trigger:
- main

pool:
  vmImage: 'windows-latest'

variables:
  solution: '**/*.csproj'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  artifactName: 'dotnet9app'
  npmCacheFolder: '$(Pipeline.Workspace)/.npm'  # For caching node_modules

stages:

# ========================
# Stage 1: Build & Publish
# ========================
- stage: Build
  displayName: 'Build Stage'
  jobs:
  - job: BuildJob
    steps:

    # ⬇ Install .NET SDK 9.0.300
    - task: UseDotNet@2
      inputs:
        version: '9.0.300'
        includePreviewVersions: true
        packageType: 'sdk'

    # ⬇ Install Node.js (required for frontend dependencies)
    - task: NodeTool@0
      inputs:
        versionSpec: '18.x'
      displayName: 'Install Node.js'

    # ⬇ Cache node_modules for faster builds
    - task: Cache@2
      inputs:
        key: 'npm | "$(Agent.OS)" | $(Build.SourcesDirectory)/package.json'
        restoreKeys: |
          npm | "$(Agent.OS)"
        path: '$(npmCacheFolder)'
      displayName: 'Cache npm packages'

    # ⬇ Install ABP CLI globally
    - script: dotnet tool install -g Volo.Abp.Cli
      displayName: 'Install ABP CLI'

    # ⬇ Restore dependencies
    - task: DotNetCoreCLI@2
      inputs:
        command: 'restore'
        projects: '$(solution)'

    # ⬇ Install client-side libraries
    - script: |
        abp install-libs
        npm install --prefer-offline --cache $(npmCacheFolder)
      workingDirectory: '$(Build.SourcesDirectory)'
      displayName: 'Install ABP client libraries'

    # ⬇ Build the project
    - task: DotNetCoreCLI@2
      inputs:
        command: 'build'
        projects: '$(solution)'
        arguments: '--configuration $(buildConfiguration)'

    # ⬇ Publish the app to a folder
    - task: DotNetCoreCLI@2
      inputs:
        command: 'publish'
        publishWebProjects: true
        arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)'
        zipAfterPublish: true

    # ⬇ Publish artifacts (to deploy later)
    - task: PublishBuildArtifacts@1
      inputs:
        pathToPublish: '$(Build.ArtifactStagingDirectory)'
        artifactName: '$(artifactName)'

# ====================
# Stage 2: Deployment
# ====================
- stage: Deploy
  displayName: 'Deploy Stage'
  dependsOn: Build
  condition: succeeded()
  jobs:
  - deployment: DeployJob
    displayName: 'Deploy to Sample App Environment'
    environment: 
      name: 'Sample App'
      resourceType: VirtualMachine
    strategy:
      runOnce:
        deploy:
          steps:

          # ✅ Download the artifact from the latest build
          - task: DownloadPipelineArtifact@2
            inputs:
              artifactName: '$(artifactName)'
              targetPath: '$(Pipeline.Workspace)/deploy/app'

          # ✅ Deploy the web app package using IISWebAppDeploymentOnMachineGroup
          - task: IISWebAppDeploymentOnMachineGroup@0
            inputs:
              WebSiteName: 'ABP-Sample'
              Package: '$(Pipeline.Workspace)\deploy\app\**\*.zip'
              AdditionalArguments: '-enableRule:AppOffline'

          # ✅ Manage IIS website (create or update)
          - task: IISWebAppManagementOnMachineGroup@0
            inputs:
              IISDeploymentType: 'IISWebsite'
              ActionIISWebsite: 'CreateOrUpdateWebsite'
              WebsiteName: 'ABP-Sample'
              WebsitePhysicalPath: '%SystemDrive%\inetpub\wwwroot\ABP-Sample'
              WebsitePhysicalPathAuth: 'WebsiteUserPassThrough'